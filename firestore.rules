rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user has made too many requests
    function notTooManyEmails() {
      let ms = duration.value(1, 'h').seconds() * 1000;
      let recentTime = request.time.toMillis() - ms;
      let recentEmails = getAfter(/databases/$(database)/documents/system)
        .where('createdAt', '>', recentTime)
        .where('attendeeEmail', '==', request.resource.data.attendeeEmail)
        .size();
      return recentEmails < 5; // Max 5 emails per hour per email address
    }

    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
      allow update: if request.auth != null || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['extendedProps']) &&
         request.resource.data.extendedProps.diff(resource.data.extendedProps).affectedKeys().hasOnly(['attendees']));
    }
    
    match /system/{mailId} {
      allow create: if 
        // Must include timestamp
        request.resource.data.createdAt is timestamp &&
        // Must have required email fields
        request.resource.data.to is string &&
        request.resource.data.message.subject is string &&
        // Must have eventId and attendeeEmail for tracking
        request.resource.data.eventId is string &&
        request.resource.data.attendeeEmail is string &&
        // Check rate limit
        notTooManyEmails() &&
        // Allow unauthenticated users
        (true);
      allow read, update, delete: if false;
    }
  }
}
