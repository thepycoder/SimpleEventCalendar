rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if request.auth != null;
      allow update: if request.auth != null || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['extendedProps']) &&
         request.resource.data.extendedProps.diff(resource.data.extendedProps).affectedKeys().hasOnly(['attendees']));
    }
    
    match /subscribers/{subscriberId} {
      // Anyone can subscribe/unsubscribe with their email
      allow create: if 
        request.resource.data.email is string &&
        request.resource.data.name is string &&
        request.resource.data.subscribedAt is timestamp;
      // Allow querying by email to check subscription status
      allow read: if 
        request.query.limit == null || request.query.limit <= 1 &&
        request.query.filters.size() == 1 &&
        request.query.filters[0].op == '==' &&
        request.query.filters[0].path == 'email';
      // Anyone can delete their own subscription by email
      allow delete: if true;
      // Admins can read all subscribers for sending notifications
      allow list: if request.auth != null;
    }
    
    match /system/{mailId} {
      allow create: if 
        // Must include timestamp
        request.resource.data.createdAt is timestamp &&
        // Must have required email fields
        request.resource.data.to is string &&
        request.resource.data.message.subject is string &&
        // For event join emails: must have eventId and attendeeEmail
        (request.resource.data.eventId is string &&
         request.resource.data.attendeeEmail is string) ||
        // For notification emails: must have notificationType
        request.resource.data.notificationType is string;
      allow read: if 
        request.query.limit == null || request.query.limit <= 1 &&
        request.query.filters.length == 2 &&
        request.query.filters[0].op == '==' &&
        request.query.filters[1].op == '==' &&
        (
          (request.query.filters[0].path == 'eventId' && request.query.filters[1].path == 'attendeeEmail') ||
          (request.query.filters[0].path == 'attendeeEmail' && request.query.filters[1].path == 'eventId')
        );
      allow update, delete: if false;
    }
  }
}
